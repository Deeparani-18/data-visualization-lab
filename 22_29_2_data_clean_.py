# -*- coding: utf-8 -*-
"""22/29/2 data clean....ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qzPizY7n-BCzi-n7bMDYbSuk7O0tqL8r

data cleaning and data preprocessing
"""

#import the pandas library
import pandas as pd
import numpy as np
df=pd.DataFrame(np.random.randn(5,3),index=['a','c','e','f','h'],columns=['one','two','three'])
print(df)
df=df.reindex(['a','b','c','d','e','f','g','h'])
print(df)

"""data cleaning"""

import pandas as pd
import numpy as np
from functools import reduce

df=pd.read_csv("/content/BL-Flickr-Images-Book.csv")
df.head()

to_drop=['Edition Statement',
         'Corporate Author',
         'Corporate Contributors',
         'Former owner',
         'Engraver',
         'Contributors',
         'Issuance type',
         'Shelfmarks']
df.drop (to_drop, inplace=True ,axis=1)
df.head()

"""setting dara of the index italicized text"""

df.set_index('Identifier',inplace=True)
df.head()

df['Date of Publication'].head(25)

"""remove data"""

unwanted_characters=['[',',','-']
def clean_dates(item):
  dop=str(item.loc['Date of Publication'])
  if dop=='nan' or dop[0]=='[':
    return np.NaN
    for character in unwanted_characters:
      if character in dop:
        character_index=dop.find(character)
        dop=dop[:character_index]
        return dop
df['Date of Publication']=df.apply(clean_dates,axis=1)
df.head()

def clean_author_names(author):

    author = str(author)

    if author == 'nan':
        return 'NaN'

    author = author.split(',')

    if len(author) == 1:
        name = filter(lambda x: x.isalpha(), author[0])
        return reduce(lambda x, y: x + y, name)

    last_name, first_name = author[0], author[1]

    first_name = first_name[:first_name.find('-')] if '-' in first_name else first_name

    if first_name.endswith(('.', '.|')):
        parts = first_name.split('.')

        if len(parts) > 1:
            first_occurence = first_name.find('.')
            final_occurence = first_name.find('.', first_occurence + 1)
            first_name = first_name[:final_occurence]
        else:
            first_name = first_name[:first_name.find('.')]

    last_name = last_name.capitalize()

    return f'{first_name} {last_name}'


df['Author'] = df['Author'].apply(clean_author_names)
df.head()